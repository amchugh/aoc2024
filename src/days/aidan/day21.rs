
use crate::days::Solution;

#[derive(Debug)]
pub struct Day21 {
    // State generated by `parse_input`
    paths: Vec<String>,
}

impl Day21 {
    // Needed for creating a blank day
    pub fn new() -> Day21 {
        Day21 { paths: vec![] }
    }
}

impl Solution for Day21 {
    fn reset(&mut self) {
        // Should probably do the same thing new() does.
        self.paths = vec![];
    }

    fn parse_input(&mut self, file_contents: &str) {
        self.paths = file_contents.split("\n").map(|x| x.to_string()).collect();
    }

    fn part1(&self) -> String {
        self.paths.iter().map(|_| -> usize {
            // let mut unvisited = PriorityQueue::new();
            1
        }).sum::<usize>().to_string()
    }

    fn part2(&self) -> String {
        "Not Implemented".to_string()
    }
}
